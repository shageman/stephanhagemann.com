# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_hash` gem.
# Please instead update this file by running `bin/tapioca gem active_hash`.

# source://active_hash//lib/active_file/multiple_files.rb#1
module ActiveFile; end

# source://active_hash//lib/active_file/base.rb#3
class ActiveFile::Base < ::ActiveHash::Base
  extend ::ActiveFile::MultipleFiles

  class << self
    # source://active_hash//lib/active_file/base.rb#53
    def all(*args, &block); end

    # source://active_hash//lib/active_file/base.rb#59
    def all_in_process; end

    # source://active_hash//lib/active_file/base.rb#7
    def data_loaded; end

    # source://active_hash//lib/active_file/base.rb#7
    def data_loaded=(value); end

    # source://active_hash//lib/active_file/base.rb#7
    def data_loaded?; end

    # source://active_hash//lib/active_file/base.rb#11
    def delete_all; end

    # source://active_hash//lib/active_file/base.rb#7
    def filename; end

    # source://active_hash//lib/active_file/base.rb#7
    def filename=(value); end

    # source://active_hash//lib/active_file/base.rb#7
    def filename?; end

    # source://active_hash//lib/active_file/base.rb#53
    def find(*args, &block); end

    # source://active_hash//lib/active_file/base.rb#53
    def find_by_id(*args, &block); end

    # source://active_hash//lib/active_file/base.rb#37
    def full_path; end

    # source://active_hash//lib/active_file/base.rb#33
    def load_file; end

    # source://active_hash//lib/active_file/base.rb#53
    def method_missing(*args, &block); end

    # source://active_hash//lib/active_file/base.rb#16
    def reload(force = T.unsafe(nil)); end

    # source://active_hash//lib/active_file/base.rb#7
    def root_path; end

    # source://active_hash//lib/active_file/base.rb#7
    def root_path=(value); end

    # source://active_hash//lib/active_file/base.rb#7
    def root_path?; end

    # source://active_hash//lib/active_file/base.rb#25
    def set_filename(name); end

    # source://active_hash//lib/active_file/base.rb#29
    def set_root_path(path); end

    # source://active_hash//lib/active_file/base.rb#53
    def where(*args, &block); end

    protected

    # source://active_hash//lib/active_file/base.rb#47
    def actual_root_path; end

    # source://active_hash//lib/active_file/base.rb#42
    def extension; end
  end
end

# source://active_hash//lib/active_file/hash_and_array_files.rb#2
module ActiveFile::HashAndArrayFiles
  # source://active_hash//lib/active_file/hash_and_array_files.rb#3
  def raw_data; end

  private

  # source://active_hash//lib/active_file/hash_and_array_files.rb#12
  def data_from_multiple_files; end
end

# source://active_hash//lib/active_file/multiple_files.rb#2
module ActiveFile::MultipleFiles
  # @return [Boolean]
  #
  # source://active_hash//lib/active_file/multiple_files.rb#3
  def multiple_files?; end

  # source://active_hash//lib/active_file/multiple_files.rb#7
  def use_multiple_files; end
end

# source://active_hash//lib/active_hash/base.rb#1
module ActiveHash; end

# source://active_hash//lib/associations/associations.rb#2
module ActiveHash::Associations
  mixes_in_class_methods ::ActiveHash::Associations::Methods

  class << self
    # @private
    #
    # source://active_hash//lib/associations/associations.rb#98
    def included(base); end
  end
end

# source://active_hash//lib/associations/associations.rb#4
module ActiveHash::Associations::ActiveRecordExtensions
  # source://active_hash//lib/associations/associations.rb#10
  def belongs_to(name, scope = T.unsafe(nil), **options); end

  # source://active_hash//lib/associations/associations.rb#27
  def belongs_to_active_hash(association_id, options = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://active_hash//lib/associations/associations.rb#6
    def extended(base); end
  end
end

# source://active_hash//lib/associations/associations.rb#102
module ActiveHash::Associations::Methods
  # source://active_hash//lib/associations/associations.rb#145
  def belongs_to(association_id, options = T.unsafe(nil)); end

  # source://active_hash//lib/associations/associations.rb#103
  def has_many(association_id, options = T.unsafe(nil)); end

  # source://active_hash//lib/associations/associations.rb#128
  def has_one(association_id, options = T.unsafe(nil)); end
end

# source://active_hash//lib/active_hash/base.rb#23
class ActiveHash::Base
  include ::ActiveModel::Conversion
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Conversion::ClassMethods

  # @return [Base] a new instance of Base
  # @yield [_self]
  # @yieldparam _self [ActiveHash::Base] the object that the method was called on
  #
  # source://active_hash//lib/active_hash/base.rb#387
  def initialize(attributes = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/base.rb#443
  def ==(other); end

  # source://active_hash//lib/active_hash/base.rb#404
  def [](key); end

  # source://active_hash//lib/active_hash/base.rb#413
  def []=(key, val); end

  # source://active_hash//lib/active_hash/base.rb#24
  def _data; end

  # source://active_hash//lib/active_hash/base.rb#24
  def _data=(_arg0); end

  # source://active_hash//lib/active_hash/base.rb#24
  def _data?; end

  # source://active_hash//lib/active_hash/base.rb#408
  def _read_attribute(key); end

  # source://active_hash//lib/active_hash/base.rb#396
  def attributes; end

  # source://active_hash//lib/active_hash/base.rb#453
  def cache_key; end

  # source://active_hash//lib/active_hash/base.rb#24
  def default_attributes; end

  # source://active_hash//lib/active_hash/base.rb#24
  def default_attributes=(_arg0); end

  # source://active_hash//lib/active_hash/base.rb#24
  def default_attributes?; end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/base.rb#431
  def destroyed?; end

  # source://active_hash//lib/active_hash/base.rb#24
  def dirty; end

  # source://active_hash//lib/active_hash/base.rb#24
  def dirty=(_arg0); end

  # source://active_hash//lib/active_hash/base.rb#24
  def dirty?; end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/base.rb#443
  def eql?(other); end

  # source://active_hash//lib/active_hash/base.rb#468
  def errors; end

  # source://active_hash//lib/active_hash/base.rb#449
  def hash; end

  # source://active_hash//lib/active_hash/base.rb#417
  def id; end

  # source://active_hash//lib/active_hash/base.rb#421
  def id=(id); end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/base.rb#495
  def marked_for_destruction?; end

  # source://activemodel/7.1.3/lib/active_model/naming.rb#255
  def model_name(&block); end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/base.rb#427
  def new_record?; end

  # source://activemodel/7.1.3/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/base.rb#435
  def persisted?; end

  # source://active_hash//lib/active_hash/base.rb#417
  def quoted_id; end

  # source://active_hash//lib/active_hash/base.rb#408
  def read_attribute(key); end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/base.rb#439
  def readonly?; end

  # source://active_hash//lib/active_hash/base.rb#482
  def save(*args); end

  # source://active_hash//lib/active_hash/base.rb#482
  def save!(*args); end

  # source://active_hash//lib/active_hash/base.rb#24
  def scopes; end

  # source://active_hash//lib/active_hash/base.rb#24
  def scopes=(_arg0); end

  # source://active_hash//lib/active_hash/base.rb#24
  def scopes?; end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/base.rb#491
  def valid?; end

  class << self
    # source://active_hash//lib/active_hash/base.rb#24
    def _data; end

    # source://active_hash//lib/active_hash/base.rb#24
    def _data=(value); end

    # source://active_hash//lib/active_hash/base.rb#24
    def _data?; end

    # source://active_hash//lib/active_hash/base.rb#150
    def add(attributes = T.unsafe(nil)); end

    # source://active_hash//lib/active_hash/base.rb#257
    def add_default_value(field_name, default_value); end

    # source://active_hash//lib/active_hash/base.rb#165
    def all(options = T.unsafe(nil)); end

    # Needed for ActiveRecord polymorphic associations
    #
    # source://active_hash//lib/active_hash/base.rb#343
    def base_class; end

    # source://active_hash//lib/active_hash/base.rb#37
    def cache_key; end

    # source://active_hash//lib/active_hash/base.rb#59
    def compute_type(type_name); end

    # source://active_hash//lib/active_hash/base.rb#171
    def count(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#150
    def create(attributes = T.unsafe(nil)); end

    # source://active_hash//lib/active_hash/base.rb#159
    def create!(attributes = T.unsafe(nil)); end

    # source://active_hash//lib/active_hash/base.rb#71
    def data; end

    # source://active_hash//lib/active_hash/base.rb#75
    def data=(array_of_hashes); end

    # source://active_hash//lib/active_hash/base.rb#24
    def default_attributes; end

    # source://active_hash//lib/active_hash/base.rb#24
    def default_attributes=(value); end

    # source://active_hash//lib/active_hash/base.rb#24
    def default_attributes?; end

    # source://active_hash//lib/active_hash/base.rb#183
    def delete_all; end

    # source://active_hash//lib/active_hash/base.rb#24
    def dirty; end

    # source://active_hash//lib/active_hash/base.rb#24
    def dirty=(value); end

    # source://active_hash//lib/active_hash/base.rb#24
    def dirty?; end

    # @return [Boolean]
    #
    # source://active_hash//lib/active_hash/base.rb#67
    def empty?; end

    # @return [Boolean]
    #
    # source://active_hash//lib/active_hash/base.rb#88
    def exists?(args = T.unsafe(nil)); end

    # source://active_hash//lib/active_hash/base.rb#196
    def field(field_name, options = T.unsafe(nil)); end

    # source://active_hash//lib/active_hash/base.rb#49
    def field_names; end

    # source://active_hash//lib/active_hash/base.rb#189
    def fields(*args); end

    # source://active_hash//lib/active_hash/base.rb#171
    def find(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#171
    def find_by(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#171
    def find_by!(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#171
    def find_by_id(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#171
    def first(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#171
    def ids(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#102
    def insert(record); end

    # source://active_hash//lib/active_hash/base.rb#171
    def last(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#226
    def method_missing(method_name, *args); end

    # source://active_hash//lib/active_hash/base.rb#112
    def next_id; end

    # source://active_hash//lib/active_hash/base.rb#171
    def order(*_arg0, **_arg1, &_arg2); end

    # source://activemodel/7.1.3/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.1.3/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.1.3/lib/active_model/conversion.rb#32
    def param_delimiter?; end

    # source://active_hash//lib/active_hash/base.rb#171
    def pick(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#171
    def pluck(*_arg0, **_arg1, &_arg2); end

    # source://active_hash//lib/active_hash/base.rb#63
    def pluralize_table_names; end

    # Needed for ActiveRecord polymorphic associations(rails/rails#32148)
    #
    # source://active_hash//lib/active_hash/base.rb#348
    def polymorphic_name; end

    # source://active_hash//lib/active_hash/base.rb#45
    def primary_key; end

    # @return [Boolean]
    #
    # source://active_hash//lib/active_hash/base.rb#216
    def respond_to?(method_name, include_private = T.unsafe(nil)); end

    # @raise [ArgumentError]
    #
    # source://active_hash//lib/active_hash/base.rb#372
    def scope(name, body); end

    # source://active_hash//lib/active_hash/base.rb#24
    def scopes; end

    # source://active_hash//lib/active_hash/base.rb#24
    def scopes=(value); end

    # source://active_hash//lib/active_hash/base.rb#24
    def scopes?; end

    # source://active_hash//lib/active_hash/base.rb#53
    def the_meta_class; end

    # source://active_hash//lib/active_hash/base.rb#173
    def transaction; end

    # source://active_hash//lib/active_hash/base.rb#171
    def where(*_arg0, **_arg1, &_arg2); end

    private

    # source://active_hash//lib/active_hash/base.rb#138
    def add_to_record_index(entry); end

    # source://active_hash//lib/active_hash/base.rb#121
    def all_in_process; end

    # source://active_hash//lib/active_hash/base.rb#326
    def auto_assign_fields(array_of_hashes); end

    # source://active_hash//lib/active_hash/base.rb#245
    def configuration_for_custom_finder(finder_name); end

    # source://active_hash//lib/active_hash/base.rb#309
    def define_custom_find_all_method(field_name); end

    # source://active_hash//lib/active_hash/base.rb#294
    def define_custom_find_method(field_name); end

    # source://active_hash//lib/active_hash/base.rb#262
    def define_getter_method(field, default_value); end

    # source://active_hash//lib/active_hash/base.rb#283
    def define_interrogator_method(field); end

    # source://active_hash//lib/active_hash/base.rb#272
    def define_setter_method(field); end

    # source://active_hash//lib/active_hash/base.rb#366
    def mark_clean; end

    # source://active_hash//lib/active_hash/base.rb#360
    def mark_dirty; end

    # source://active_hash//lib/active_hash/base.rb#126
    def record_index; end

    # source://active_hash//lib/active_hash/base.rb#352
    def reload; end

    # source://active_hash//lib/active_hash/base.rb#132
    def reset_record_index; end

    # source://active_hash//lib/active_hash/base.rb#208
    def validate_field(field_name); end

    # @raise [IdError]
    #
    # source://active_hash//lib/active_hash/base.rb#144
    def validate_unique_id(record); end
  end
end

# source://active_hash//lib/enum/enum.rb#2
module ActiveHash::Enum
  mixes_in_class_methods ::ActiveHash::Enum::Methods

  class << self
    # @private
    #
    # source://active_hash//lib/enum/enum.rb#6
    def included(base); end
  end
end

# source://active_hash//lib/enum/enum.rb#4
class ActiveHash::Enum::DuplicateEnumAccessor < ::RuntimeError; end

# source://active_hash//lib/enum/enum.rb#10
module ActiveHash::Enum::Methods
  # source://active_hash//lib/enum/enum.rb#22
  def delete_all; end

  # source://active_hash//lib/enum/enum.rb#12
  def enum_accessor(*field_names); end

  # source://active_hash//lib/enum/enum.rb#17
  def insert(record); end

  private

  # source://active_hash//lib/enum/enum.rb#45
  def constant_for(record, field_names); end

  # source://active_hash//lib/enum/enum.rb#32
  def set_constant(record); end
end

# source://active_hash//lib/active_hash/base.rb#20
class ActiveHash::FileTypeMismatchError < ::StandardError; end

# source://active_hash//lib/active_hash/base.rb#17
class ActiveHash::IdError < ::StandardError; end

# source://active_hash//lib/active_hash/base.rb#2
class ActiveHash::RecordNotFound < ::StandardError
  # @return [RecordNotFound] a new instance of RecordNotFound
  #
  # source://active_hash//lib/active_hash/base.rb#5
  def initialize(message = T.unsafe(nil), model = T.unsafe(nil), primary_key = T.unsafe(nil), id = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://active_hash//lib/active_hash/base.rb#3
  def id; end

  # Returns the value of attribute model.
  #
  # source://active_hash//lib/active_hash/base.rb#3
  def model; end

  # Returns the value of attribute primary_key.
  #
  # source://active_hash//lib/active_hash/base.rb#3
  def primary_key; end
end

# source://active_hash//lib/active_hash/relation.rb#2
class ActiveHash::Relation
  include ::Enumerable

  # @return [Relation] a new instance of Relation
  #
  # source://active_hash//lib/active_hash/relation.rb#12
  def initialize(klass, all_records, conditions = T.unsafe(nil), order_values = T.unsafe(nil)); end

  # source://active_hash//lib/active_hash/relation.rb#6
  def ==(arg); end

  # source://active_hash//lib/active_hash/relation.rb#6
  def ===(arg); end

  # source://active_hash//lib/active_hash/relation.rb#95
  def all(options = T.unsafe(nil)); end

  # Returns the value of attribute all_records.
  #
  # source://active_hash//lib/active_hash/relation.rb#10
  def all_records; end

  # Returns the value of attribute conditions.
  #
  # source://active_hash//lib/active_hash/relation.rb#10
  def conditions; end

  # source://active_hash//lib/active_hash/relation.rb#137
  def count; end

  # source://active_hash//lib/active_hash/relation.rb#5
  def each(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#7
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#6
  def eql?(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#6
  def equal?(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#111
  def find(id = T.unsafe(nil), *args, &block); end

  # source://active_hash//lib/active_hash/relation.rb#103
  def find_by(options); end

  # source://active_hash//lib/active_hash/relation.rb#107
  def find_by!(options); end

  # source://active_hash//lib/active_hash/relation.rb#129
  def find_by_id(id); end

  # source://active_hash//lib/active_hash/relation.rb#7
  def first(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#158
  def ids; end

  # source://active_hash//lib/active_hash/relation.rb#55
  def invert_where; end

  # source://active_hash//lib/active_hash/relation.rb#59
  def invert_where!; end

  # Returns the value of attribute klass.
  #
  # source://active_hash//lib/active_hash/relation.rb#10
  def klass; end

  # source://active_hash//lib/active_hash/relation.rb#7
  def last(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#7
  def length(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#170
  def method_missing(method_name, *args); end

  # source://active_hash//lib/active_hash/relation.rb#42
  def order(*options); end

  # source://active_hash//lib/active_hash/relation.rb#68
  def order!(*options); end

  # Returns the value of attribute order_values.
  #
  # source://active_hash//lib/active_hash/relation.rb#10
  def order_values; end

  # source://active_hash//lib/active_hash/relation.rb#162
  def pick(*column_names); end

  # source://active_hash//lib/active_hash/relation.rb#145
  def pluck(*column_names); end

  # source://active_hash//lib/active_hash/relation.rb#25
  def pretty_print(pp); end

  # source://active_hash//lib/active_hash/relation.rb#83
  def records; end

  # source://active_hash//lib/active_hash/relation.rb#90
  def reload; end

  # source://active_hash//lib/active_hash/relation.rb#46
  def reorder(*options); end

  # source://active_hash//lib/active_hash/relation.rb#74
  def reorder!(*options); end

  # source://active_hash//lib/active_hash/relation.rb#8
  def sample(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#7
  def second(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#141
  def size; end

  # source://active_hash//lib/active_hash/relation.rb#6
  def sort!(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#64
  def spawn; end

  # source://active_hash//lib/active_hash/relation.rb#7
  def third(*_arg0, **_arg1, &_arg2); end

  # source://active_hash//lib/active_hash/relation.rb#166
  def to_ary; end

  # source://active_hash//lib/active_hash/relation.rb#19
  def where(conditions_hash = T.unsafe(nil)); end

  # source://active_hash//lib/active_hash/relation.rb#50
  def where!(conditions_hash, inverted = T.unsafe(nil)); end

  private

  # Sets the attribute all_records
  #
  # @param value the value to set the attribute all_records to.
  #
  # source://active_hash//lib/active_hash/relation.rb#182
  def all_records=(_arg0); end

  # source://active_hash//lib/active_hash/relation.rb#184
  def apply_conditions(records, conditions); end

  # source://active_hash//lib/active_hash/relation.rb#207
  def apply_order_values(records, args); end

  # @raise [ArgumentError]
  #
  # source://active_hash//lib/active_hash/relation.rb#192
  def check_if_method_has_arguments!(method_name, args); end

  # Sets the attribute conditions
  #
  # @param value the value to set the attribute conditions to.
  #
  # source://active_hash//lib/active_hash/relation.rb#182
  def conditions=(_arg0); end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://active_hash//lib/active_hash/relation.rb#182
  def klass=(_arg0); end

  # Sets the attribute order_values
  #
  # @param value the value to set the attribute order_values to.
  #
  # source://active_hash//lib/active_hash/relation.rb#182
  def order_values=(_arg0); end

  # source://active_hash//lib/active_hash/relation.rb#199
  def preprocess_order_args(order_args); end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/relation.rb#176
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://active_hash//lib/active_hash/condition.rb#1
class ActiveHash::Relation::Condition
  # @return [Condition] a new instance of Condition
  #
  # source://active_hash//lib/active_hash/condition.rb#4
  def initialize(constraints); end

  # Returns the value of attribute constraints.
  #
  # source://active_hash//lib/active_hash/condition.rb#2
  def constraints; end

  # source://active_hash//lib/active_hash/condition.rb#9
  def invert!; end

  # Returns the value of attribute inverted.
  #
  # source://active_hash//lib/active_hash/condition.rb#2
  def inverted; end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/condition.rb#15
  def matches?(record); end

  private

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/condition.rb#33
  def matches_value?(value, comparison); end

  # source://active_hash//lib/active_hash/condition.rb#41
  def normalize(value); end
end

# source://active_hash//lib/active_hash/conditions.rb#1
class ActiveHash::Relation::Conditions
  # @return [Conditions] a new instance of Conditions
  #
  # source://active_hash//lib/active_hash/conditions.rb#6
  def initialize(conditions = T.unsafe(nil)); end

  # source://active_hash//lib/active_hash/conditions.rb#4
  def <<(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute conditions.
  #
  # source://active_hash//lib/active_hash/conditions.rb#2
  def conditions; end

  # source://active_hash//lib/active_hash/conditions.rb#4
  def map(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://active_hash//lib/active_hash/conditions.rb#10
  def matches?(record); end

  class << self
    # source://active_hash//lib/active_hash/conditions.rb#16
    def wrap(conditions); end
  end
end

# source://active_hash//lib/active_hash/relation.rb#29
class ActiveHash::Relation::WhereChain
  # @return [WhereChain] a new instance of WhereChain
  #
  # source://active_hash//lib/active_hash/relation.rb#32
  def initialize(relation); end

  # source://active_hash//lib/active_hash/relation.rb#36
  def not(conditions_hash); end

  # Returns the value of attribute relation.
  #
  # source://active_hash//lib/active_hash/relation.rb#30
  def relation; end
end

# source://active_hash//lib/active_hash/base.rb#14
class ActiveHash::ReservedFieldError < ::StandardError; end

# source://active_hash//lib/active_json/base.rb#1
module ActiveJSON; end

# source://active_hash//lib/active_json/base.rb#2
class ActiveJSON::Base < ::ActiveFile::Base
  extend ::ActiveFile::HashAndArrayFiles

  class << self
    # source://active_hash//lib/active_json/base.rb#13
    def extension; end

    # source://active_hash//lib/active_json/base.rb#5
    def load_file; end

    private

    # source://active_hash//lib/active_json/base.rb#18
    def load_path(path); end
  end
end

# source://active_hash//lib/active_yaml/base.rb#3
module ActiveYaml; end

# source://active_hash//lib/active_yaml/aliases.rb#3
module ActiveYaml::Aliases
  mixes_in_class_methods ::ActiveYaml::Aliases::ClassMethods

  class << self
    # @private
    #
    # source://active_hash//lib/active_yaml/aliases.rb#4
    def included(base); end
  end
end

# source://active_hash//lib/active_yaml/aliases.rb#8
ActiveYaml::Aliases::ALIAS_KEY_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://active_hash//lib/active_yaml/aliases.rb#10
module ActiveYaml::Aliases::ClassMethods
  # source://active_hash//lib/active_yaml/aliases.rb#12
  def insert(record); end

  # source://active_hash//lib/active_yaml/aliases.rb#16
  def raw_data; end
end

# source://active_hash//lib/active_yaml/base.rb#5
class ActiveYaml::Base < ::ActiveFile::Base
  extend ::ActiveFile::HashAndArrayFiles

  class << self
    # source://active_hash//lib/active_yaml/base.rb#20
    def extension; end

    # source://active_hash//lib/active_yaml/base.rb#12
    def load_file; end

    # source://active_hash//lib/active_yaml/base.rb#8
    def process_erb; end

    # source://active_hash//lib/active_yaml/base.rb#8
    def process_erb=(val); end

    private

    # source://active_hash//lib/active_yaml/base.rb#26
    def load_path(path); end
  end
end
