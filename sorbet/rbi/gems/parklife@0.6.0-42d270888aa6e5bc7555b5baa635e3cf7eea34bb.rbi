# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `parklife` gem.
# Please instead update this file by running `bin/tapioca gem parklife`.

# source://parklife//lib/parklife/config.rb#6
module Parklife
  class << self
    # source://parklife//lib/parklife.rb#7
    def application; end
  end
end

# source://parklife//lib/parklife/application.rb#10
class Parklife::Application
  # @return [Application] a new instance of Application
  #
  # source://parklife//lib/parklife/application.rb#13
  def initialize; end

  # @raise [BuildDirNotDefinedError]
  #
  # source://parklife//lib/parklife/application.rb#18
  def build; end

  # Returns the value of attribute config.
  #
  # source://parklife//lib/parklife/application.rb#11
  def config; end

  # @yield [config]
  #
  # source://parklife//lib/parklife/application.rb#28
  def configure; end

  # source://parklife//lib/parklife/application.rb#32
  def crawler; end

  # @raise [ParkfileLoadError]
  #
  # source://parklife//lib/parklife/application.rb#36
  def load_Parkfile(path); end

  # source://parklife//lib/parklife/application.rb#41
  def routes(&block); end
end

# source://parklife//lib/parklife/browser.rb#7
class Parklife::Browser
  # @return [Browser] a new instance of Browser
  #
  # source://parklife//lib/parklife/browser.rb#10
  def initialize(app, base); end

  # Returns the value of attribute app.
  #
  # source://parklife//lib/parklife/browser.rb#8
  def app; end

  # Returns the value of attribute base.
  #
  # source://parklife//lib/parklife/browser.rb#8
  def base; end

  # Returns the value of attribute env.
  #
  # source://parklife//lib/parklife/browser.rb#8
  def env; end

  # source://parklife//lib/parklife/browser.rb#17
  def get(path); end

  # Returns the value of attribute session.
  #
  # source://parklife//lib/parklife/browser.rb#8
  def session; end

  private

  # source://parklife//lib/parklife/browser.rb#22
  def set_env; end
end

# source://parklife//lib/parklife/errors.rb#5
class Parklife::BuildDirNotDefinedError < ::Parklife::Error; end

# source://parklife//lib/parklife/config.rb#7
class Parklife::Config
  # @return [Config] a new instance of Config
  #
  # source://parklife//lib/parklife/config.rb#14
  def initialize; end

  # Returns the value of attribute app.
  #
  # source://parklife//lib/parklife/config.rb#11
  def app; end

  # Sets the attribute app
  #
  # @param value the value to set the attribute app to.
  #
  # source://parklife//lib/parklife/config.rb#11
  def app=(_arg0); end

  # Returns the value of attribute base.
  #
  # source://parklife//lib/parklife/config.rb#12
  def base; end

  # source://parklife//lib/parklife/config.rb#22
  def base=(value); end

  # Returns the value of attribute build_dir.
  #
  # source://parklife//lib/parklife/config.rb#11
  def build_dir; end

  # Sets the attribute build_dir
  #
  # @param value the value to set the attribute build_dir to.
  #
  # source://parklife//lib/parklife/config.rb#11
  def build_dir=(_arg0); end

  # Returns the value of attribute nested_index.
  #
  # source://parklife//lib/parklife/config.rb#11
  def nested_index; end

  # Sets the attribute nested_index
  #
  # @param value the value to set the attribute nested_index to.
  #
  # source://parklife//lib/parklife/config.rb#11
  def nested_index=(_arg0); end

  # Returns the value of attribute on_404.
  #
  # source://parklife//lib/parklife/config.rb#11
  def on_404; end

  # Sets the attribute on_404
  #
  # @param value the value to set the attribute on_404 to.
  #
  # source://parklife//lib/parklife/config.rb#11
  def on_404=(_arg0); end

  # Returns the value of attribute reporter.
  #
  # source://parklife//lib/parklife/config.rb#11
  def reporter; end

  # Sets the attribute reporter
  #
  # @param value the value to set the attribute reporter to.
  #
  # source://parklife//lib/parklife/config.rb#11
  def reporter=(_arg0); end
end

# source://parklife//lib/parklife/config.rb#8
Parklife::Config::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://parklife//lib/parklife/config.rb#9
Parklife::Config::DEFAULT_SCHEME = T.let(T.unsafe(nil), String)

# source://parklife//lib/parklife/crawler.rb#9
class Parklife::Crawler
  # @return [Crawler] a new instance of Crawler
  #
  # source://parklife//lib/parklife/crawler.rb#12
  def initialize(config, route_set); end

  # Returns the value of attribute browser.
  #
  # source://parklife//lib/parklife/crawler.rb#10
  def browser; end

  # Returns the value of attribute config.
  #
  # source://parklife//lib/parklife/crawler.rb#10
  def config; end

  # source://parklife//lib/parklife/crawler.rb#18
  def get(path); end

  # Returns the value of attribute route_set.
  #
  # source://parklife//lib/parklife/crawler.rb#10
  def route_set; end

  # source://parklife//lib/parklife/crawler.rb#22
  def start; end

  private

  # source://parklife//lib/parklife/crawler.rb#35
  def process_route(route); end
end

# source://parklife//lib/parklife/errors.rb#4
class Parklife::Error < ::StandardError; end

# source://parklife//lib/parklife/errors.rb#8
class Parklife::HTTPError < ::Parklife::Error
  # @return [HTTPError] a new instance of HTTPError
  #
  # source://parklife//lib/parklife/errors.rb#9
  def initialize(status, path); end
end

# source://parklife//lib/parklife/errors.rb#14
class Parklife::ParkfileLoadError < ::Parklife::Error
  # @return [ParkfileLoadError] a new instance of ParkfileLoadError
  #
  # source://parklife//lib/parklife/errors.rb#15
  def initialize(path); end
end

# source://parklife//lib/parklife/errors.rb#6
class Parklife::RackAppNotDefinedError < ::Parklife::Error; end

# source://parklife//lib/parklife/route.rb#4
class Parklife::Route
  # @return [Route] a new instance of Route
  #
  # source://parklife//lib/parklife/route.rb#7
  def initialize(path, crawl:); end

  # source://parklife//lib/parklife/route.rb#12
  def ==(other); end

  # Returns the value of attribute crawl.
  #
  # source://parklife//lib/parklife/route.rb#5
  def crawl; end

  # source://parklife//lib/parklife/route.rb#12
  def eql?(other); end

  # source://parklife//lib/parklife/route.rb#17
  def hash; end

  # source://parklife//lib/parklife/route.rb#21
  def inspect; end

  # Returns the value of attribute path.
  #
  # source://parklife//lib/parklife/route.rb#5
  def path; end
end

# source://parklife//lib/parklife/route_set.rb#7
class Parklife::RouteSet
  include ::Enumerable

  # @return [RouteSet] a new instance of RouteSet
  #
  # source://parklife//lib/parklife/route_set.rb#12
  def initialize; end

  # source://parklife//lib/parklife/route_set.rb#16
  def each; end

  # source://parklife//lib/parklife/route_set.rb#22
  def get(path, crawl: T.unsafe(nil)); end

  # source://parklife//lib/parklife/route_set.rb#26
  def root(crawl: T.unsafe(nil)); end

  # Returns the value of attribute routes.
  #
  # source://parklife//lib/parklife/route_set.rb#10
  def routes; end

  # source://parklife//lib/parklife/route_set.rb#30
  def size; end

  # source://parklife//lib/parklife/route_set.rb#34
  def to_a; end
end

# source://parklife//lib/parklife/utils.rb#7
module Parklife::Utils
  extend ::Parklife::Utils

  # source://parklife//lib/parklife/utils.rb#10
  def build_path_for(path, index: T.unsafe(nil)); end

  # source://parklife//lib/parklife/utils.rb#26
  def host_with_port(uri); end

  # source://parklife//lib/parklife/utils.rb#31
  def save_page(path, content, config); end

  # source://parklife//lib/parklife/utils.rb#40
  def scan_for_links(html); end
end

# source://parklife//lib/parklife/version.rb#4
Parklife::VERSION = T.let(T.unsafe(nil), String)
